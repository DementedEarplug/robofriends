{"version":3,"sources":["components/RoboCard.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Header.jsx","components/Scroll.jsx","components/ErrorBoundary.jsx","App.js","serviceWorker.js","index.js"],"names":["HelloWorld","className","src","this","props","roboName","alt","roboEmail","Component","CardList","robots","map","robot","key","id","name","email","SearchBox","onChange","searchChange","type","placeholder","htmlFor","Header","nextProps","nextState","console","log","Scroll","style","overflowY","height","children","ErrorBoundary","state","hasError","setState","App","onSearchChange","event","search","target","value","axios","get","fetchedRobots","data","filteredRobots","filter","toLocaleLowerCase","includes","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.32aded26.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../style/RoboCard.css\"\nimport \"tachyons\"\nexport default class HelloWorld extends Component {\n  render() {\n    return (\n      <div className=\"roboCard dib br3 pa3 ma2 grow bw2 shadow-5\">\n        <img src={`https://robohash.org/${this.props.roboName}`} alt='Robo Img'/>\n        <h1>{this.props.roboName}</h1>\n        <p>{this.props.roboEmail}</p>\n      </div>\n    );\n  }\n}\n\n\n","import React, { Component, Fragment } from \"react\";\nimport RoboCard from \"./RoboCard\";\n\nexport default class CardList extends Component {\n  render() {\n    return (\n      <Fragment>\n        {this.props.robots.map((robot) => {\n          return (\n            <RoboCard\n              key={robot.id}\n              roboName={robot.name}\n              roboEmail={robot.email}\n            />\n          );\n        })}\n      </Fragment>\n    );\n  }\n}\n","import React, { Component, Fragment } from 'react'\n\nexport default class SearchBox extends Component {\n    render() {\n        return (\n            <Fragment>\n                <input onChange={this.props.searchChange} className=\"br2 bw1\" type=\"search\" name=\"search\" placeholder=\"Search Robo Friends\" />\n                <label htmlFor=\"search\"> Search for your Robofriends!</label>\n            </Fragment>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport SearchBox from \"./SearchBox\";\nimport \"../style/Header.css\"\nimport \"tachyons\";\n\nexport default class Header extends Component {\n    shouldComponentUpdate(nextProps, nextState){\n        return false\n    }\n    \n    render() {\n        console.log('Header')\n        return (\n            <div >\n                <h1 className=\"header\">Robo Friends</h1>\n                <SearchBox searchChange={this.props.searchChange} className=\"tc db fl w-100\" />\n                <hr/>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Scroll extends Component {\n    render() {\n        return (\n            <div \n            style={{\n                overflowY: 'scroll',\n                height:'800px',\n            }}\n            >\n                {this.props.children}\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\n\nexport default class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  // Kind of like a try catch life scycle\n  componentDidCatch() {\n    this.setState({hasError:true})\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div>\n          <h1>Opps, something went wrong!</h1>\n        </div>\n      );\n    }\n    return this.props.children;\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./components/RoboCard\";\nimport CardList from \"./components/CardList\";\nimport Header from \"./components/Header\";\nimport Scroll from \"./components/Scroll\";\nimport ErrorBoundary from \"./components/ErrorBoundary\";\nimport axios from \"axios\";\nimport \"tachyons\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      search: \"\",\n    };\n  }\n\n  // Equivalent to vue's mounted()\n  async componentDidMount() {\n    const fetchedRobots = await axios.get(\n      \"https://jsonplaceholder.typicode.com/users\"\n    );\n    this.setState({ robots: fetchedRobots.data });\n  }\n\n  // Use arrow functions to prevent an error with the this. keyword using\n  // the local prop scope instead of the parent scope.\n  onSearchChange = (event) => {\n    this.setState({ search: event.target.value });\n  };\n\n  render() {\n    const { robots, search } = this.state;\n    // Pass this array as a prop to see the filtering take place.\n    const filteredRobots = robots.filter((robots) => {\n      return robots.name\n        .toLocaleLowerCase()\n        .includes(search.toLocaleLowerCase());\n    });\n\n    return robots.length ? (\n      <div className=\"App\">\n        <Header searchChange={this.onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    ) : (\n      <div className=\"App\">\n        <Header searchChange={this.onSearchChange} />\n        <h1 className=\"pv7\">Loading...</h1>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}